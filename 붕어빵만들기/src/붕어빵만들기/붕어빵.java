package 붕어빵만들기;

// 붕어빵을만들기 위한 틀
// package = 폴
public class 붕어빵 {
	// 멤버변수(이 클래스에 소속되었다 멤버라고 부름)
	// 변수( 붕어빵 클래스에 저장된 데이터를 보관하는 메모리공간)
	// 데이터 타입 변수명=실제 사용할 데이터;
	// 띄어쓰기 대신 _ 사용하여 한문장이라고 연결
	// 변수에 숫자 가능, -+*()등은 이미 연산자 등으로 의미가 정의되어있기 때문에 사용 불가
	
	// 밀가루 반죽
	String 붕어빵_바깥쪽 = "밀가루 반죽"; 
	// 맛있는 소
	String 붕어빵_안쪽 = "팥앙금"; 
	// 먹는사람
	String 먹을_사람;
	String 굽기정도;
	
	
	// 붕어빵을 처음 새로 만들 때 무조건 불러서
	// 위의 멤버변수에 값을 저장해주는 메소드
	// 초기화 메소드라고 하고 이 메소드를 생성자라고 한다.
	// 무조건 객체가 만들어질 때 new와 같이 불러진다.
	// # 생성자선언법:
	// 클래스명 (멤버변수에 저장할 데이터 변수들...){
	//	... 기능들
	// }
	
	붕어빵( String 붕어빵을_먹을_사람, 
			String 붕어빵_안에_소,
			String 붕어빵_굽기정도){
		먹을_사람=붕어빵을_먹을_사람;
		붕어빵_안쪽=붕어빵_안에_소;
		굽기정도=붕어빵_굽기정도;
		
	}
		
	
	// 메소드도 이 틀과 관련이 있어야 함.
	// 그래서 멤버 메소드라고 부른다.
	// 행동(이 틀과 관련되어서만 동작이 실행되니까 메소드)
	// 붕어빵에 재료를 집어넣는다.
	
	void 붕어빵_틀에_재료를_넣는다() {
		System.out.println(붕어빵_바깥쪽 + "을 집어 넣는다.");
		System.out.println(붕어빵_안쪽 + "을 집어 넣는다.");
		System.out.println(붕어빵_바깥쪽 + "을 덮어 준다.");

	}

	// 붕어빵을 불에 구워준다.
	void 붕어빵을_구워준다() {
		System.out.println("붕어빵을 구워준다.");

	}

	// 잘 구워진 붕어빵을 꺼낸다.
	void 붕어빵을_꺼낸다() {
		System.out.println(굽기정도+" 잘구워진 붕어빵을 꺼낸다.");

	}

	// 잘 구워진 붕어빵을 맛있게 먹는다.
	void 붕어빵을_맛있게_먹는다() {
		System.out.println(먹을_사람+"이/가 잘구워진 붕어빵을 맛있게 먹는다.");
	}
	// 자바로 만들어진 애플리케이션을 실항하려면 main() method가
	// 반드시 있어야함. 형식은 아래 예제
	// public - 누구나 실행가능
	// static - main() 한번만 실행하는것, 그 후 붕어빵은 붕어빵 클래스를 사용하여 반복하여 만들 수 있음.
	// void - 실행 후 남는것(=결과값) 없음
	// main - 자바의 약속. 무조건 실행하는 메소드의 이름.
	// String[] - 문자열들 = 배열이라고 부름.
	// 배열은 여러 데이터들을 한개의 대표이름으로 부르고 각각의 데이터는 차례 번호로 구분.
	// 예) String[1], String[2]
	// args - 문자열 배열의 대표 변수명

	public static void main(String[] args) {
		// 붕어빵틀(= 붕어빵 클래스)를 이용하여 붕어빵 만들기
		// 붕어빵 객체의 데이터형을 선언
		// 만들어진 붕어빵 객체의 이름을 선언합니다.
		// 컴퓨터 메모리에 방을 만든다는 뜻
		// 붕어빵틀(붕어빵 클래스)을 이용해서 따끈따끈한 새(new) 붕어빵을 만든다

		붕어빵 내붕어빵 = new 붕어빵("내", "팥", "바싹");
		
		내붕어빵.붕어빵_틀에_재료를_넣는다();
		내붕어빵.붕어빵을_구워준다();
		내붕어빵.붕어빵을_꺼낸다();
		내붕어빵.붕어빵을_맛있게_먹는다();
		

		System.out.println();
		System.out.println();
		
		// 동생붕어빵 만들기
		
		붕어빵 동생붕어빵 = new 붕어빵("동생", "슈크림", "적당히");
		
		동생붕어빵.붕어빵_틀에_재료를_넣는다();
		동생붕어빵.붕어빵을_구워준다();
		동생붕어빵.붕어빵을_꺼낸다();
		동생붕어빵.붕어빵을_맛있게_먹는다();
		
		붕어빵 언니붕어빵 = new 붕어빵("언니", "팥과 슈크림", "적당히");
		
		언니붕어빵.붕어빵_틀에_재료를_넣는다();
		언니붕어빵.붕어빵을_구워준다();
		언니붕어빵.붕어빵을_꺼낸다();
		언니붕어빵.붕어빵을_맛있게_먹는다();
		

	}

}
